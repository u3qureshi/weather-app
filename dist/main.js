/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const apiKey = \"9ee87f434ac49eb6d0469172d235ae8e\";\r\nconst conversionSwitch = document.querySelector('.conversion-switch');\r\nconst conversionSwitchLabel = document.querySelector('.conversion-switch-label');\r\nconst locationButton = document.querySelector('.location-search-icon');\r\nconst searchButton = document.querySelector('.search-button');\r\nconst searchInput = document.querySelector('.search-bar-input');\r\nconst weatherContainer = document.querySelector('.weather-container');\r\nlet root = document.documentElement;\r\n\r\nlet currentCityName = '';\r\n//SetInterval for clock function every 1000ms\r\nwindow.setInterval(displayCurrentTime, 1000);\r\n//Enter event listener for enter key in the input\r\nsearchInput.addEventListener('keyup', (e) => {\r\n    if (e.key == 'Enter')\r\n        searchCity();\r\n});\r\n\r\nlet weather = {\r\n    fetchWeatherWithCity: (cityName, unit) => {\r\n        fetch(\r\n                `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=${unit}&appid=${apiKey}`\r\n            ).then((response) => response.json())\r\n            .then((data) => {\r\n                if (unit == 'metric') {\r\n                    weather.displayWeatherC(data);\r\n                } else {\r\n                    weather.displayWeatherF(data);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                searchInput.style.border = '1px solid red';\r\n                searchInput.placeholder = 'Enter a valid city';\r\n                setTimeout(() => {\r\n                    searchInput.style.border = 'none';\r\n                    searchInput.placeholder = 'Search City';\r\n                }, 1500);\r\n                weatherContainer.dataset.content = 'Enter a valid city'\r\n                setTimeout(() => {\r\n                    weatherContainer.dataset.content = '🌏 Enter a city to find its current weather...'\r\n                }, 1500);\r\n            });\r\n    },\r\n\r\n    fetchWeatherWithPosition: (lat, lon, unit) => {\r\n        fetch(\r\n                `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=${unit}&appid=${apiKey}`\r\n            ).then((response) => response.json())\r\n            .then((data) => {\r\n                if (unit == 'metric') {\r\n                    weather.displayWeatherC(data);\r\n                } else {\r\n                    weather.displayWeatherF(data);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                searchInput.style.border = '1px solid red';\r\n                searchInput.placeholder = 'Enter a valid city';\r\n                setTimeout(() => {\r\n                    searchInput.style.border = 'none';\r\n                    searchInput.placeholder = 'Search City';\r\n                }, 1500);\r\n                weatherContainer.dataset.content = 'Enter a valid city'\r\n                setTimeout(() => {\r\n                    weatherContainer.dataset.content = '🌏 Enter a city to find its current weather...'\r\n                }, 1500);\r\n            });\r\n    },\r\n\r\n    /** Displays weather in Celsius */\r\n    displayWeatherC: (weatherObj) => {\r\n        //Destructuring assignment to gather necessary variables from the data from the weather object\r\n        const { name } = weatherObj;\r\n        currentCityName = name;\r\n        const { icon, main, description } = weatherObj.weather[0];\r\n        const { temp, feels_like, humidity } = weatherObj.main;\r\n        const { speed } = weatherObj.wind;\r\n        const { country } = weatherObj.sys;\r\n\r\n        const cityText = document.querySelector('.city');\r\n        const weatherIcon = document.querySelector('.weather-icon');\r\n        const temperatureText = document.querySelector('.temperature');\r\n        const descriptionText = document.querySelector('.weather-description');\r\n        const humidityText = document.querySelector('.weather-humidity');\r\n        const feelsLikeText = document.querySelector('.weather-feels-like');\r\n        const windText = document.querySelector('.weather-wind-speed');\r\n\r\n        selectBackground(main);\r\n        weatherIcon.src = `http://openweathermap.org/img/wn/${icon}@2x.png`;\r\n        cityText.innerText = ` Weather in ${name}, ${country}`;\r\n        temperatureText.innerText = `${Math.round(temp)}°C`;\r\n        descriptionText.innerText = capitalizeFirstLetter(description);\r\n        humidityText.innerText = `Humidity: ${humidity}%`;\r\n        feelsLikeText.innerText = `Feels like: ${Math.round(feels_like)}°C`;\r\n        windText.innerText = `Wind Speed: ${Math.round(speed)} m/s`;\r\n\r\n        //loading toggle text\r\n        weatherContainer.classList.remove('loading');\r\n    },\r\n\r\n    /** Displays weather in Fahrenheit */\r\n    displayWeatherF: (weatherObj) => {\r\n        //Destructuring assignment to gather necessary variables from the data from the weather object\r\n        const { name } = weatherObj;\r\n        currentCityName = name;\r\n        const { icon, main, description } = weatherObj.weather[0];\r\n        const { temp, feels_like, humidity } = weatherObj.main;\r\n        const { speed } = weatherObj.wind;\r\n        const { country } = weatherObj.sys;\r\n\r\n        const cityText = document.querySelector('.city');\r\n        const weatherIcon = document.querySelector('.weather-icon');\r\n        const temperatureText = document.querySelector('.temperature');\r\n        const descriptionText = document.querySelector('.weather-description');\r\n        const humidityText = document.querySelector('.weather-humidity');\r\n        const feelsLikeText = document.querySelector('.weather-feels-like');\r\n        const windText = document.querySelector('.weather-wind-speed');\r\n\r\n        selectBackground(main);\r\n        weatherIcon.src = `http://openweathermap.org/img/wn/${icon}@2x.png`;\r\n        cityText.innerText = ` Weather in ${name}, ${country}`;\r\n        temperatureText.innerText = `${Math.round(temp)}°F`;\r\n        descriptionText.innerText = capitalizeFirstLetter(description);\r\n        humidityText.innerText = `Humidity: ${humidity}%`;\r\n        feelsLikeText.innerText = `Feels like: ${Math.round(feels_like)}°F`;\r\n        windText.innerText = `Wind Speed: ${Math.round(speed)} MPH`;\r\n\r\n        //loading toggle text\r\n        weatherContainer.classList.remove('loading');\r\n    },\r\n}\r\n\r\n/** Celsiuis to fahrenheit switch */\r\n\r\nfunction switchIsChecked() {\r\n    if (conversionSwitch.checked == true) return true;\r\n    else return false;\r\n}\r\nconversionSwitch.addEventListener('click', e => {\r\n    if (switchIsChecked()) {\r\n        conversionSwitchLabel.innerText = '°F';\r\n        weather.fetchWeatherWithCity(currentCityName, 'imperial');\r\n    } else {\r\n        conversionSwitchLabel.innerText = '°C';\r\n        weather.fetchWeatherWithCity(currentCityName, 'metric');\r\n    }\r\n});\r\n\r\n//Conversion functions\r\nfunction convertToImperial(temp, feels, speed) {\r\n    let fahrenheitTemp = (temp * 9 / 5) + 32;\r\n    let fahrenheitFeels = (feels * 9 / 5) + 32;\r\n    let newSpeed = (speed * 2.23694);\r\n\r\n    return { fahrenheitTemp, fahrenheitFeels, newSpeed };\r\n}\r\n\r\nfunction convertToMetric(temp, feels, speed) {\r\n    let celsiusTemp = (temp - 32) * 5 / 9;\r\n    let celsiusFeels = (feels - 32) * 5 / 9;\r\n    let newSpeed = (speed / 2.23694);\r\n\r\n    return { celsiusTemp, celsiusFeels, newSpeed };\r\n}\r\n\r\n/** Location button */\r\nlocationButton.addEventListener('click', e => {\r\n    if (window.navigator.geolocation) { //if browser supports geolocation\r\n        window.navigator.geolocation.getCurrentPosition(successCallback, failureCallback);\r\n    }\r\n})\r\n\r\nfunction successCallback(position) {\r\n    const { latitude, longitude } = position.coords;\r\n    if (switchIsChecked()) {\r\n        weather.fetchWeatherWithPosition(latitude, longitude, 'imperial');\r\n    } else {\r\n        weather.fetchWeatherWithPosition(latitude, longitude, 'metric');\r\n    }\r\n}\r\n\r\nfunction failureCallback() {\r\n    alert('Please allow for geolocation to access this feature.');\r\n}\r\n\r\nfunction capitalizeFirstLetter(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n/** Search Button */\r\nsearchButton.addEventListener('click', searchCity);\r\n\r\nfunction searchCity() {\r\n    const cityName = searchInput.value;\r\n    searchInput.value = '';\r\n    if (switchIsChecked()) {\r\n        weather.fetchWeatherWithCity(cityName, 'imperial');\r\n    } else {\r\n        weather.fetchWeatherWithCity(cityName, 'metric');\r\n    }\r\n}\r\n\r\nfunction selectBackground(weatherDescription) {\r\n    const html = document.querySelector('html');\r\n    if (weatherDescription == 'Clouds') {\r\n        html.style.backgroundImage = 'url(images/cloudy-bi.jpg)';\r\n    } else if (weatherDescription == 'Clear') {\r\n        html.style.backgroundImage = 'url(images/sunny-bi.jpg)';\r\n    } else if (weatherDescription == 'Rain') {\r\n        html.style.backgroundImage = 'url(images/morning-rainy-bi.png)';\r\n    } else if (weatherDescription == 'Snow') {\r\n        html.style.backgroundImage = 'url(images/morning-snowy-bi.jpg)';\r\n    } else if (weatherDescription == 'Drizzle') {\r\n        html.style.backgroundImage = 'url(images/morning-drizzle-bi.jpg)';\r\n    } else if (weatherDescription == 'Thunderstorm') {\r\n        html.style.backgroundImage = 'url(images/morning-thunderstormy-bi.jpg)';\r\n    } else {\r\n        html.style.backgroundImage = 'url(images/mist-bi.jpg)';\r\n    }\r\n}\r\n\r\nfunction displayCurrentTime() {\r\n    let date = new Date();\r\n    let today = date.toLocaleTimeString();\r\n    const clockText = document.querySelector('.clock');\r\n    clockText.innerText = today;\r\n}\n\n//# sourceURL=webpack://weather-app/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;